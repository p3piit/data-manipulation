---
title: "Creating Conditional Variables and Renaming Variables"
---

## Creating Conditional Variables with `case_when()`

```{r, echo=FALSE}
data("bfi", package = "psychTools") 
library(dplyr)
library(psych)
bfi <- mutate(bfi, gender = factor(gender, labels = c("male", "female")))
names(bfi.keys) <- c("agree", "consc", "extra", "neuro", "open")
scores <- scoreVeryFast(keys = bfi.keys, items = bfi)
bfi <- data.frame(bfi, scores)
bfi <- mutate(bfi,
              agree_z = (agree - mean(agree, na.rm = TRUE)) / sd(agree, na.rm = TRUE),
              consc_z = (consc - mean(consc, na.rm = TRUE)) / sd(consc, na.rm = TRUE),
              extra_z = (extra - mean(extra, na.rm = TRUE)) / sd(extra, na.rm = TRUE),
              neuro_z = (neuro - mean(neuro, na.rm = TRUE)) / sd(neuro, na.rm = TRUE),
              open_z  = (open  - mean(open,  na.rm = TRUE)) / sd(open,  na.rm = TRUE))
```

The `case_when()` function inside `mutate()` allows you to build new variables based on conditional logic, similar to “if...else” statements but more readable.

For example, we can classify participants into categories of gendered maturity based on their age and gender:

```{r}
library(dplyr) # load dplyr
bfi <- mutate(bfi,
              gendered_maturity = case_when(
                  age < 18 & gender == "male"   ~ "boy",
                  age < 18 & gender == "female" ~ "girl",
                  age >= 18 & gender == "male"  ~ "man",
                  age >= 18 & gender == "female"~ "woman",
                  TRUE ~ NA_character_),
              gendered_maturity = as.factor(gendered_maturity))
str(bfi)
levels(bfi$gendered_maturity)
with(bfi, table(minor = age < 18, gender, gendered_maturity))
```

## Renaming Variables 

Finally, the `rename()` and `rename_with()` functions from `dplyr` provide a clean way to rename variables, individually or in groups.

To rename a few columns directly:

```{r}
bfi <- rename(bfi, gen = gender, ed = education, gm = gendered_maturity)
head(bfi)
```

To rename several variables programmatically, use `rename_with()`. For instance, we can convert all item names ending in a number to lowercase:

```{r}
bfi <- rename_with(bfi, .fn = tolower, .cols = matches("\\d$"))
head(bfi)
```

```{webr-r}
#| autorun: true
#| context: setup
library(psychTools)
library(dplyr)
library(magrittr)
data("bfi", package = "psychTools")
library(psych) # load psych package
names(bfi.keys) <- c("agree", "consc", "extra", "neuro", "open")
tmp <- scoreItems(keys = bfi.keys, items = bfi, impute = "none")
bfi <- data.frame(bfi, as.data.frame(tmp$scores)) %>%
     mutate(
        gender = factor(gender, labels = c("male", "female")),
        agree_z = (agree - mean(agree, na.rm = TRUE)) / sd(agree, na.rm = TRUE),
        consc_z = (consc - mean(consc, na.rm = TRUE)) / sd(consc, na.rm = TRUE),
        extra_z = (extra - mean(extra, na.rm = TRUE)) / sd(extra, na.rm = TRUE),
        neuro_z = (neuro - mean(neuro, na.rm = TRUE)) / sd(neuro, na.rm = TRUE),
        open_z  = (open  - mean(open,  na.rm = TRUE)) / sd(open,  na.rm = TRUE),
        gm = case_when(
                  age < 18 & gender == "male"   ~ "boy",
                  age < 18 & gender == "female" ~ "girl",
                  age >= 18 & gender == "male"  ~ "man",
                  age >= 18 & gender == "female"~ "woman",
                  TRUE ~ NA_character_),
        gm = as.factor(gm),
        ) %>%
        rename(ed = education,
               gen = gender) %>%
        rename_with(.fn = tolower, .cols = matches("\\d$"))
```

::: practice

## Practice 1

::: {.callout-note}
## Notation

The following problem statement uses these abbreviations

* O = Openness to Experience (`open`)
* E = Extraversion (`extra`)
:::



Use `dplyr::mutate()` and `case_when()` to create a new factor called `type` that satisfies the following logic

* `type` = "adventurous" when O is higher than the mean of O and E is higher than the mean of E
* `type` = "inquisitive" when O is higher than the mean of O and E is lower than or equal to the mean of E
* `type` = "quiet" when O is lower than or equal to the mean of O and E is lower than or equal to the mean of E
* `type` = "chatty" when O is lower than or equal to the mean of O and E is higher than the mean of E

:::: {.panel-tabset}
## {{< var tab_title.editor >}}

```{webr-r}

```

## {{< var tab_title.solution >}}

```{r}
bfi <- mutate(bfi,
              type = case_when(
                  open > mean(open, na.rm = TRUE) & extra > mean(extra, na.rm = TRUE) ~ "adventurous",
                  open > mean(open, na.rm = TRUE) & extra <= mean(extra, na.rm = TRUE) ~ "inquisitive",
                  open <= mean(open, na.rm = TRUE) & extra <= mean(extra, na.rm = TRUE) ~ "quiet",
                  open <= mean(open, na.rm = TRUE) & extra > mean(extra, na.rm = TRUE) ~ "chatty",
                  TRUE ~ NA_character_),
              type = as.factor(type))
```
::::

:::

::: practice

## Practice 2

(a) Exclude the raw scale items from the modified 'bfi' data.
(b) Save the dataset from (a) as an RDS file.

:::: {.panel-tabset}
## {{< var tab_title.editor >}}

```{webr-r}

```

## {{< var tab_title.solution >}}

```{r}
# a)
bfi_mod <- select(bfi, -starts_with(c("A", "C", "E", "N", "O"))) 

#b)
saveRDS(bfi_mod, file = "bfi_mod.rds")

```
::::

:::


